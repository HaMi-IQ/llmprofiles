name: Publish NPM Package

on:
  push:
    tags:
      - 'npm-v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      publish:
        description: 'Publish to NPM after version bump'
        required: false
        default: true
        type: boolean
      dry_run:
        description: 'Perform dry run (no actual publish)'
        required: false
        default: false
        type: boolean
      release_notes:
        description: 'Custom release notes (optional)'
        required: false
        default: ''
        type: string

env:
  NODE_VERSION: '20'

jobs:
  version-bump:
    name: Bump Version and Prepare Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new-version: ${{ steps.bump-version.outputs.new-version }}
      should-publish: ${{ steps.bump-version.outputs.should-publish }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Bump version and prepare release
        id: bump-version
        run: |
          cd npm-package
          
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Bump version
          VERSION_TYPE="${{ github.event.inputs.version }}"
          echo "Bumping $VERSION_TYPE version..."
          
          # Use npm version to bump
          if [ "$VERSION_TYPE" = "prerelease" ]; then
            NEW_VERSION=$(npm version prerelease --preid=alpha --no-git-tag-version | sed 's/v//')
          else
            NEW_VERSION=$(npm version $VERSION_TYPE --no-git-tag-version | sed 's/v//')
          fi
          
          echo "New version: $NEW_VERSION"
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "should-publish=${{ github.event.inputs.publish }}" >> $GITHUB_OUTPUT
          
          # Update changelog
          DATE=$(date -u +"%Y-%m-%d")
          CHANGELOG_ENTRY="## [$NEW_VERSION] - $DATE"
          
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            CHANGELOG_ENTRY="$CHANGELOG_ENTRY"$'\n\n'"${{ github.event.inputs.release_notes }}"
          else
            CHANGELOG_ENTRY="$CHANGELOG_ENTRY"$'\n\n'"### Changes"$'\n'"- Version bump to $NEW_VERSION"
          fi
          
          # Add to changelog
          if [ -f "CHANGELOG.md" ]; then
            echo "$CHANGELOG_ENTRY" > temp_changelog.md
            echo "" >> temp_changelog.md
            cat CHANGELOG.md >> temp_changelog.md
            mv temp_changelog.md CHANGELOG.md
          else
            echo "$CHANGELOG_ENTRY" > CHANGELOG.md
          fi
          
          # Commit changes
          git add package.json CHANGELOG.md
          git commit -m "chore: bump version to $NEW_VERSION"
          
          # Create and push tag
          git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"
          
          echo "✅ Version bumped to $NEW_VERSION and pushed to repository"

  publish:
    name: Build and Publish NPM Package
    runs-on: ubuntu-latest
    needs: [version-bump]
    if: always() && (needs.version-bump.result == 'success' || github.event_name != 'workflow_dispatch')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Validate main repository
        run: npm run validate
        
      - name: Build NPM package
        run: npm run build:npm
        
      - name: Validate package.json exports
        run: |
          cd npm-package
          echo "🔍 Validating package.json exports configuration..."
          node -e "
            const pkg = require('./package.json');
            console.log('✅ Package name:', pkg.name);
            console.log('✅ Main entry:', pkg.main);
            console.log('✅ Module entry:', pkg.module);
            console.log('✅ Types entry:', pkg.types);
            console.log('✅ Exports configured:', !!pkg.exports);
            console.log('📊 Export paths:', Object.keys(pkg.exports).length);
            
            // Validate individual profile exports
            const profileExports = Object.keys(pkg.exports).filter(key => key.startsWith('./profiles/'));
            console.log('📄 Individual profile exports:', profileExports.length);
            
            // Check for required export paths
            const requiredExports = [
              '.',
              './profiles/article',
              './profiles/jobposting',
              './profiles/productoffer'
            ];
            
            const missingExports = requiredExports.filter(exp => !pkg.exports[exp]);
            if (missingExports.length > 0) {
              console.error('❌ Missing required exports:', missingExports);
              process.exit(1);
            }
            console.log('✅ All required exports present');
          "
        
      - name: Check package contents
        run: |
          echo "📦 NPM Package Contents:"
          ls -la npm-package/
          echo ""
          echo "📊 Package Size:"
          du -sh npm-package/
          echo ""
          echo "📋 Profile Count:"
          cd npm-package && node -e "console.log('Profiles:', Object.keys(require('./profiles/index.json')).length)"
          echo ""
          echo "🔍 ES Module Files:"
          find npm-package -name "*.mjs" | wc -l | xargs echo "ES Module files:"
          echo ""
          echo "📁 Individual Profile Files:"
          find npm-package/profiles -name "*.js" -o -name "*.mjs" | wc -l | xargs echo "Individual profile files:"
          echo ""
          echo "📝 TypeScript Definitions:"
          find npm-package/types -name "*.d.ts" | wc -l | xargs echo "TypeScript definition files:"
          
      - name: Test package installation
        run: |
          cd npm-package
          npm pack
          
          # Create a clean test directory to avoid circular dependencies
          mkdir -p ../test-install && cd ../test-install
          
          echo "🧪 Testing CommonJS compatibility..."
          echo '{"name": "test-install", "version": "1.0.0", "type": "commonjs"}' > package.json
          npm install ../npm-package/*.tgz
          node -e "
            const pkg = require('@llmprofiles/core');
            console.log('✅ CommonJS package loads successfully');
            console.log('📋 Available profiles:', pkg.listProfiles().length);
            
            // Test builder
            const article = new pkg.ArticleBuilder()
              .headline('Test Article')
              .author('Test Author')
              .datePublished('2024-01-15')
              .build();
            console.log('✅ CommonJS builder works');
            
            // Test validation
            const result = pkg.validateStructuredData(article, 'Article');
            console.log('✅ CommonJS validation works:', result.valid);
          "
          
          echo ""
          echo "🧪 Testing ES Module compatibility..."
          echo '{"name": "test-install", "version": "1.0.0", "type": "module"}' > package.json
          npm install ../npm-package/*.tgz
          node --input-type=module -e "
            import { ArticleBuilder, MODES, getProfile, listProfiles } from '@llmprofiles/core';
            import { articleProfile } from '@llmprofiles/core/profiles/article';
            
            console.log('✅ ES Module package loads successfully');
            console.log('📋 Available profiles:', listProfiles().length);
            console.log('📄 Individual profile import works:', articleProfile.type);
            
            // Test builder
            const article = new ArticleBuilder(MODES.STRICT_SEO)
              .headline('Test Article')
              .author('Test Author')
              .datePublished('2024-01-15')
              .build();
            console.log('✅ ES Module builder works');
            console.log('🎯 Mode-specific properties:', !!article.additionalType);
          "
          
          echo ""
          echo "🧪 Testing individual profile imports..."
          node --input-type=module -e "
            import { articleProfile } from '@llmprofiles/core/profiles/article';
            import { jobpostingProfile } from '@llmprofiles/core/profiles/jobposting';
            import { productofferProfile } from '@llmprofiles/core/profiles/productoffer';
            
            console.log('✅ Individual profile imports work');
            console.log('📄 Article profile:', articleProfile.type);
            console.log('📄 JobPosting profile:', jobpostingProfile.type);
            console.log('📄 Product profile:', productofferProfile.type);
            console.log('📊 Total individual profiles tested: 3');
          "
          
          echo ""
          echo "🧪 Testing real-world usage scenarios..."
          
          # Test CommonJS in a separate directory
          mkdir -p test-commonjs && cd test-commonjs
          echo '{"type": "commonjs"}' > package.json
          npm install ../../npm-package/*.tgz
          node -e "
            const { ArticleBuilder, MODES } = require('@llmprofiles/core');
            const article = new ArticleBuilder(MODES.STRICT_SEO)
              .headline('Real-world Test')
              .author('CI/CD')
              .build();
            console.log('✅ CommonJS real-world test passed');
          "
          cd ..
          
          # Test ES modules in a separate directory
          mkdir -p test-esm && cd test-esm
          echo '{"type": "module"}' > package.json
          npm install ../../npm-package/*.tgz
          node --input-type=module -e "
            import { ArticleBuilder, MODES } from '@llmprofiles/core';
            import { articleProfile } from '@llmprofiles/core/profiles/article';
            
            const article = new ArticleBuilder(MODES.STRICT_SEO)
              .headline('Real-world Test')
              .author('CI/CD')
              .build();
            console.log('✅ ES Module real-world test passed');
            console.log('✅ Individual profile import in real project works');
          "
          cd ..
          
          # Clean up test directory
          cd .. && rm -rf test-install
          
      - name: Check if should publish
        id: check-publish
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ needs.version-bump.outputs.should-publish }}" = "true" ]; then
              echo "should-publish=true" >> $GITHUB_OUTPUT
            else
              echo "should-publish=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "should-publish=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Dry run publish
        if: github.event.inputs.dry_run == 'true'
        run: |
          cd npm-package
          npm publish --dry-run
          echo "✅ Dry run completed successfully"
          
      - name: Publish to NPM
        if: steps.check-publish.outputs.should-publish == 'true' && github.event.inputs.dry_run != 'true'
        run: |
          cd npm-package
          npm publish --access public
          echo "✅ Published to NPM successfully"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub Release
        if: github.event.inputs.dry_run != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: npm-v${{ github.run_number }}
          release_name: NPM Package Release v${{ github.run_number }}
          body: |
            ## NPM Package Release
            
            Published `@llmprofiles/core` to NPM registry with **ES Module support** and **individual profile imports**.
            
            ### 📦 Package Information
            - **Version**: Auto-synced from main package
            - **Profiles**: 15 core profiles included
            - **Size**: ~70KB minimal bundle
            - **Module Support**: Both CommonJS and ES modules
            - **Individual Imports**: Import single profiles without loading entire package
            
            ### 🚀 Installation
            ```bash
            npm install @llmprofiles/core
            ```
            
            ### 🆕 New Features
            #### ES Module Support
            ```javascript
            // Import individual profiles
            import { articleProfile } from '@llmprofiles/core/profiles/article';
            import { ArticleBuilder, MODES } from '@llmprofiles/core';
            
            // Tree shaking friendly
            const article = new ArticleBuilder(MODES.STRICT_SEO)
              .headline('My Article')
              .build();
            ```
            
            #### Backward Compatibility
            ```javascript
            // CommonJS still works
            const { ArticleBuilder, MODES } = require('@llmprofiles/core');
            ```
            
            ### 📚 Documentation
            - [NPM Package](https://www.npmjs.com/package/@llmprofiles/core)
            - [ES Module Guide](https://github.com/HaMi-IQ/llmprofiles/blob/main/npm-package/ES_MODULE_GUIDE.md)
            - [Full Documentation](https://llmprofiles.org)
            - [GitHub Repository](https://github.com/HaMi-IQ/llmprofiles)
          draft: false
          prerelease: false
          
  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [publish]
    if: always()
    steps:
      - name: Notify on success
        if: needs.publish.result == 'success'
        run: |
          echo "🎉 NPM package published successfully!"
          echo "📦 Package: @llmprofiles/core"
          echo "🔗 NPM: https://www.npmjs.com/package/@llmprofiles/core"
          
      - name: Notify on failure
        if: needs.publish.result == 'failure'
        run: |
          echo "❌ NPM package publishing failed!"
          echo "Check the logs for details."

