name: Profile Change Detection

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'profiles/**/v*/**'
      - '**/v*/index.jsonld'
      - '**/v*/*.schema.json'
      - '**/v*/examples/**'
      - '**/v*/training.jsonl'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'profiles/**/v*/**'
      - '**/v*/index.jsonld'
      - '**/v*/*.schema.json'
      - '**/v*/examples/**'
      - '**/v*/training.jsonl'

env:
  NODE_VERSION: '20'

jobs:
  detect-changes:
    name: Detect Profile Changes
    runs-on: ubuntu-latest
    outputs:
      profiles-changed: ${{ steps.changes.outputs.profiles }}
      change-summary: ${{ steps.changes.outputs.summary }}
      has-schema-changes: ${{ steps.changes.outputs.has-schema }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Detect Profile Changes
        id: changes
        env:
          EVENT_NAME: ${{ github.event_name }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          BEFORE_SHA: ${{ github.event.before }}
          HEAD_SHA: ${{ github.sha }}
        run: |
          # Get the base commit for comparison
          if [ "$EVENT_NAME" = "pull_request" ]; then
            BASE_COMMIT="$BASE_SHA"
          else
            BASE_COMMIT="$BEFORE_SHA"
          fi
          
          if [ -z "$BASE_COMMIT" ] || [ "$BASE_COMMIT" = "0000000000000000000000000000000000000" ]; then
            BASE_COMMIT="HEAD~1"
          fi
          
          echo "Comparing changes from $BASE_COMMIT to $HEAD_SHA"
          
          # Get list of changed profile files
          CHANGED_FILES=$(git diff --name-only "$BASE_COMMIT" "$HEAD_SHA" | grep -E '^profiles/[^/]+/[^/]+/v\d+/' || true)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No profile changes detected"
            echo "profiles=" >> "$GITHUB_OUTPUT"
            echo "summary=No profile changes detected" >> "$GITHUB_OUTPUT"
            echo "has-schema=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          # Extract profile types and categorize changes
          PROFILES_CHANGED=()
          SCHEMA_CHANGES=()
          
          while IFS= read -r file; do
            if [[ $file =~ ^profiles/[^/]+/([^/]+)/v[0-9]+/ ]]; then
              PROFILE_TYPE="${BASH_REMATCH[1]}"
              PROFILES_CHANGED+=("$PROFILE_TYPE")
              
              if [[ $file =~ \.schema\.json$ ]]; then
                SCHEMA_CHANGES+=("$PROFILE_TYPE")
              fi
            fi
          done <<< "$CHANGED_FILES"
          
          # Remove duplicates
          UNIQUE_PROFILES=($(printf "%s\n" "${PROFILES_CHANGED[@]}" | sort -u))
          UNIQUE_SCHEMAS=($(printf "%s\n" "${SCHEMA_CHANGES[@]}" | sort -u))
          
          # Create change summary
          SUMMARY="Profiles modified: ${#UNIQUE_PROFILES[@]}"
          if [ ${#UNIQUE_SCHEMAS[@]} -gt 0 ]; then
            SUMMARY="$SUMMARY, Schemas updated: ${#UNIQUE_SCHEMAS[@]}"
          fi
          
          # Output results
          echo "profiles=${UNIQUE_PROFILES[*]}" >> "$GITHUB_OUTPUT"
          echo "summary=$SUMMARY" >> "$GITHUB_OUTPUT"
          echo "has-schema=$([ ${#UNIQUE_SCHEMAS[@]} -gt 0 ] && echo 'true' || echo 'false')" >> "$GITHUB_OUTPUT"
          
          # Log summary
          echo "üìä Change Summary: $SUMMARY"
          echo "üìÅ Profiles: ${UNIQUE_PROFILES[*]}"
          if [ ${#UNIQUE_SCHEMAS[@]} -gt 0 ]; then
            echo "üîß Schema updates: ${UNIQUE_SCHEMAS[*]}"
          fi

  validate-changes:
    name: Validate Profile Changes
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.profiles-changed != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Validate Changed Profiles
        run: |
          echo "Validating profiles: ${{ needs.detect-changes.outputs.profiles-changed }}"
          npm run validate
          echo "‚úÖ All profile changes validated successfully"
          
      - name: Test Profile Endpoints
        run: |
          echo "Testing endpoints for profiles: ${{ needs.detect-changes.outputs.profiles-changed }}"
          npm run test-well-known
          echo "‚úÖ Profile endpoints tested successfully"

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-changes]
    if: needs.detect-changes.outputs.profiles-changed != '' && needs.validate-changes.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Update Profile READMEs
        run: |
          echo "Updating READMEs for profiles: ${{ needs.detect-changes.outputs.profiles-changed }}"
          npm run create-readmes
          echo "‚úÖ Profile READMEs updated"
          
      - name: Regenerate API Documentation
        run: |
          echo "Regenerating API documentation..."
          npm run generate-api
          echo "‚úÖ API documentation regenerated"
          
      - name: Commit Documentation Updates
        if: github.event_name == 'push'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No documentation changes to commit"
          else
            git add .
            git commit -m "docs: update documentation for profile changes - ${{ needs.detect-changes.outputs.change-summary }}"
            git push

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-changes, update-documentation]
    if: success() && needs.detect-changes.outputs.profiles-changed != ''
    steps:
      - name: Success Notification
        run: |
          echo "‚úÖ Profile changes processed successfully!"
          echo "üìä ${{ needs.detect-changes.outputs.change-summary }}"
          echo "üìÅ Profiles: ${{ needs.detect-changes.outputs.profiles-changed }}"


  create-schema-issue:
    name: Create Schema Change Issue
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-changes, update-documentation]
    if: success() && needs.detect-changes.outputs.has-schema-changes == 'true'
    steps:
      - name: Create Issue for Schema Changes
        uses: actions/github-script@v7
        with:
          script: |
            const { createSchemaIssue } = require('./.github/scripts/create-schema-issue.js');
            await createSchemaIssue(context, github);
