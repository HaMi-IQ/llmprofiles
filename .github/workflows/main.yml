name: Unified CI/CD Pipeline

on:
  # Automatic triggers
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  # Manual triggers
  workflow_dispatch:
    inputs:
      mode:
        description: 'Pipeline mode'
        required: true
        default: 'full'
        type: choice
        options:
          - full          # Full CI/CD pipeline
          - validate      # Only validation
          - build         # Only build (no deploy)
          - deploy        # Only deploy (assumes build exists)
          - release       # Create release
      release_type:
        description: 'Release type (for release mode)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      version:
        description: 'Specific version (for release mode)'
        required: false
        type: string
      dry_run:
        description: 'Dry run (for release mode)'
        required: false
        default: false
        type: boolean
      skip-validation:
        description: 'Skip validation steps'
        required: false
        default: false
        type: boolean
      skip-build:
        description: 'Skip build steps'
        required: false
        default: false
        type: boolean
      skip-deploy:
        description: 'Skip deployment'
        required: false
        default: false
        type: boolean
  # Release triggers
  release:
    types: [published]

env:
  NODE_VERSION: '20'

jobs:
  detect-changes:
    name: Detect Profile Changes
    runs-on: ubuntu-latest
    outputs:
      profiles-changed: ${{ steps.changes.outputs.profiles }}
      change-summary: ${{ steps.changes.outputs.summary }}
      has-schema-changes: ${{ steps.changes.outputs.has-schema }}
      change-type: ${{ steps.changes.outputs.type }}
    if: |
      github.event_name == 'push' || 
      github.event_name == 'pull_request' ||
      (github.event_name == 'workflow_dispatch' && 
       github.event.inputs.mode != 'deploy' && 
       github.event.inputs.mode != 'release')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
          
      - name: Detect Profile Changes
        id: changes
        env:
          EVENT_NAME: ${{ github.event_name }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          BEFORE_SHA: ${{ github.event.before }}
          HEAD_SHA: ${{ github.sha }}
        run: |
          # Get the base commit for comparison
          if [ "$EVENT_NAME" = "pull_request" ]; then
            BASE_COMMIT="$BASE_SHA"
          else
            BASE_COMMIT="$BEFORE_SHA"
          fi
          
          if [ -z "$BASE_COMMIT" ] || [ "$BASE_COMMIT" = "0000000000000000000000000000000000000" ]; then
            BASE_COMMIT="HEAD~1"
          fi
          
          echo "Comparing changes from $BASE_COMMIT to $HEAD_SHA"
          
          # Get list of changed profile files
          CHANGED_FILES=$(git diff --name-only "$BASE_COMMIT" "$HEAD_SHA" | grep -E '^profiles/[^/]+/[^/]+/v\d+/' || true)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No profile changes detected"
            echo "profiles=" >> "$GITHUB_OUTPUT"
            echo "summary=No profile changes detected" >> "$GITHUB_OUTPUT"
            echo "has-schema=false" >> "$GITHUB_OUTPUT"
            echo "type=general" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          # Extract profile types and categorize changes
          PROFILES_CHANGED=()
          SCHEMA_CHANGES=()
          
          while IFS= read -r file; do
            if [[ $file =~ ^profiles/[^/]+/([^/]+)/v[0-9]+/ ]]; then
              PROFILE_TYPE="${BASH_REMATCH[1]}"
              PROFILES_CHANGED+=("$PROFILE_TYPE")
              
              if [[ $file =~ \.schema\.json$ ]]; then
                SCHEMA_CHANGES+=("$PROFILE_TYPE")
              fi
            fi
          done <<< "$CHANGED_FILES"
          
          # Remove duplicates
          UNIQUE_PROFILES=($(printf "%s\n" "${PROFILES_CHANGED[@]}" | sort -u))
          UNIQUE_SCHEMAS=($(printf "%s\n" "${SCHEMA_CHANGES[@]}" | sort -u))
          
          # Create change summary
          SUMMARY="Profiles modified: ${#UNIQUE_PROFILES[@]}"
          if [ ${#UNIQUE_SCHEMAS[@]} -gt 0 ]; then
            SUMMARY="$SUMMARY, Schemas updated: ${#UNIQUE_SCHEMAS[@]}"
          fi
          
          # Determine change type
          if [ ${#UNIQUE_SCHEMAS[@]} -gt 0 ]; then
            CHANGE_TYPE="schema"
          elif [ ${#UNIQUE_SCHEMAS[@]} -gt 0 ]; then
            CHANGE_TYPE="profile"
          else
            CHANGE_TYPE="general"
          fi
          
          # Output results
          echo "profiles=${UNIQUE_PROFILES[*]}" >> "$GITHUB_OUTPUT"
          echo "summary=$SUMMARY" >> "$GITHUB_OUTPUT"
          echo "has-schema=$([ ${#UNIQUE_SCHEMAS[@]} -gt 0 ] && echo 'true' || echo 'false')" >> "$GITHUB_OUTPUT"
          echo "type=$CHANGE_TYPE" >> "$GITHUB_OUTPUT"
          
          # Log summary
          echo "üìä Change Summary: $SUMMARY"
          echo "üìÅ Profiles: ${UNIQUE_PROFILES[*]}"
          echo "üîß Change Type: $CHANGE_TYPE"
          if [ ${#UNIQUE_SCHEMAS[@]} -gt 0 ]; then
            echo "üîß Schema updates: ${UNIQUE_SCHEMAS[*]}"
          fi

  validate:
    name: Validate Changes
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      (needs.detect-changes.outputs.profiles-changed != '' || 
       github.event.inputs.skip-validation != 'true') &&
      (github.event_name != 'workflow_dispatch' || 
       github.event.inputs.mode == 'full' || 
       github.event.inputs.mode == 'validate')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run validation
        run: npm run validate
        
      - name: Run tests
        run: npm run test
        
      - name: Run CI validation
        run: npm run test-ci -- --verbose
        
      - name: Test well-known endpoints
        run: npm run test-well-known
        
      - name: Lint JSON/JSON-LD
        run: node scripts/validate-json.js
        
      - name: Validate Page Markup (schema contract)
        run: |
          node scripts/validate-ajv.js \
            profiles/interaction/faqpage/v1/page.schema.json \
            examples/faqpage/minimal.page.jsonld
            
      - name: Validate Extracted Output (RAG contract)
        run: |
          node scripts/validate-ajv.js \
            profiles/interaction/faqpage/v1/output.schema.json \
            examples/faqpage/sample.output.json
            
      - name: Validate Well-Known Discovery
        run: |
          node scripts/validate-ajv.js \
            .well-known/llmprofiles.schema.json \
            .well-known/llmprofiles.json || true
            
      - name: Test Discovery Endpoint
        run: |
          curl -fsSL https://llmprofiles.org/.well-known/llmprofiles.json | jq . || true

  build:
    name: Build and Generate
    runs-on: ubuntu-latest
    needs: [validate]
    if: |
      (needs.validate.result == 'success' || 
       github.event.inputs.skip-validation == 'true') &&
      (github.event_name != 'workflow_dispatch' || 
       github.event.inputs.mode == 'full' || 
       github.event.inputs.mode == 'build')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build documentation
        run: npm run build:docs
        
      - name: Convert markdown to HTML
        run: npm run build:md
        
      - name: Generate API documentation
        run: npm run generate-api
        
      - name: Create profile READMEs
        run: npm run create-readmes
        
      - name: Generate generic images
        run: npm run generate-images
        
      - name: List dist contents
        run: |
          echo "üìÅ Dist directory contents:"
          ls -la dist/
          echo "üìÅ Dist directory size:"
          du -sh dist/
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/
          retention-days: 30

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      github.ref == 'refs/heads/main' &&
      github.event.inputs.skip-deploy != 'true' &&
      (needs.build.result == 'success' || 
       github.event.inputs.mode == 'deploy') &&
      (github.event_name != 'workflow_dispatch' || 
       github.event.inputs.mode == 'full' || 
       github.event.inputs.mode == 'deploy')
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist/
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [detect-changes, validate, build]
    if: |
      (github.event_name == 'workflow_dispatch' && 
       github.event.inputs.mode == 'release') ||
      (github.event_name == 'release' && 
       github.event.action == 'published')
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
          
      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Prepare Release
        id: release
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
            VERSION="${{ github.event.inputs.version }}"
            DRY_RUN="${{ github.event.inputs.dry_run }}"
            
            if [ "$DRY_RUN" = "true" ]; then
              npm run release:prepare -- --type $RELEASE_TYPE --version "$VERSION" --dry-run
            else
              npm run release:prepare -- --type $RELEASE_TYPE --version "$VERSION"
            fi
          else
            # Release trigger
            TAG="${{ github.ref_name }}"
            VERSION="${TAG#v}"
            npm run changelog -- --version "$VERSION" --since "HEAD~20"
          fi
          
      - name: Push changes
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true'
        run: |
          git push origin main
          git push origin --tags
          
      - name: Create GitHub Release
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release.outputs.tag || github.ref_name }}
          release_name: Release ${{ steps.release.outputs.tag || github.ref_name }}
          body: |
            ## Changes in this release:
            
            ${{ steps.release.outputs.releaseNotes || 'See the changelog for details.' }}
            
            ## Build Information
            - Build Number: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Triggered by: ${{ github.actor }}
          draft: false
          prerelease: false

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [detect-changes, validate, build]
    if: |
      needs.detect-changes.outputs.profiles-changed != '' &&
      needs.validate.result == 'success' &&
      needs.build.result == 'success' &&
      github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
          
      - name: Update Profile READMEs
        run: |
          echo "Updating READMEs for profiles: ${{ needs.detect-changes.outputs.profiles-changed }}"
          npm run create-readmes
          echo "‚úÖ Profile READMEs updated"
          
      - name: Regenerate API Documentation
        run: |
          echo "Regenerating API documentation..."
          npm run generate-api
          echo "‚úÖ API documentation regenerated"
          
      - name: Commit Documentation Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "No documentation changes to commit"
          else
            git add .
            git commit -m "docs: update documentation for profile changes - ${{ needs.detect-changes.outputs.change-summary }}"
            git push
          fi

  create-schema-issue:
    name: Create Schema Change Issue
    runs-on: ubuntu-latest
    needs: [detect-changes, validate, build, update-documentation]
    if: |
      success() &&
      needs.detect-changes.outputs.has-schema-changes == 'true' &&
      needs.detect-changes.outputs.change-type == 'schema'
    steps:
      - name: Create Issue for Schema Changes
        uses: actions/github-script@v7
        with:
          script: |
            const { createSchemaIssue } = require('./.github/scripts/create-schema-issue.js');
            await createSchemaIssue(context, github);

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [detect-changes, validate, build, deploy, release, update-documentation]
    if: always()
    steps:
      - name: Determine Pipeline Mode
        id: mode
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "mode=${{ github.event.inputs.mode }}" >> "$GITHUB_OUTPUT"
          else
            echo "mode=auto" >> "$GITHUB_OUTPUT"
          fi
          
      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ Unified pipeline completed successfully!"
          echo "üîß Mode: ${{ steps.mode.outputs.mode }}"
          
          if [ "${{ needs.detect-changes.outputs.profiles-changed }}" != "" ]; then
            echo "üìä ${{ needs.detect-changes.outputs.change-summary }}"
            echo "üìÅ Profiles: ${{ needs.detect-changes.outputs.profiles-changed }}"
            echo "üîß Change Type: ${{ needs.detect-changes.outputs.change-type }}"
          fi
          
          if [ "${{ steps.mode.outputs.mode }}" = "deploy" ]; then
            echo "üöÄ Deployment completed"
          elif [ "${{ steps.mode.outputs.mode }}" = "release" ]; then
            echo "üéâ Release created successfully"
          elif [ "${{ steps.mode.outputs.mode }}" = "validate" ]; then
            echo "‚úÖ Validation completed"
          elif [ "${{ steps.mode.outputs.mode }}" = "build" ]; then
            echo "üî® Build completed"
          else
            echo "üöÄ Full pipeline completed"
          fi
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Unified pipeline failed!"
          echo "üîß Mode: ${{ steps.mode.outputs.mode }}"
          echo "Please check the logs for details"
