name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.json'
      - '**/*.jsonld'
      - '**/*.md'
      - '**/*.js'
      - '**/*.html'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.json'
      - '**/*.jsonld'
      - '**/*.md'
      - '**/*.js'
      - '**/*.html'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
  release:
    types: [published]

env:
  NODE_VERSION: '20'
  NPM_VERSION: '9'

jobs:
  validate:
    name: Validate & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run validation
        run: npm run validate
        
      - name: Run tests
        run: npm run test
        
      - name: Run CI validation
        run: npm run test-ci
        
      - name: Test well-known endpoints
        run: npm run test-well-known

  build:
    name: Build & Generate
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build documentation
        run: npm run build:docs
        
      - name: Convert markdown to HTML
        run: npm run build:md
        
      - name: Generate API documentation
        run: npm run generate-api
        
      - name: Create profile READMEs
        run: npm run create-readmes
        
      - name: Generate generic images
        run: npm run generate-images
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/
          retention-days: 30

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist/
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate changelog
        id: changelog
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # First release - get all commits
            CHANGELOG=$(git log --oneline --format="- %s" | head -50)
          else
            # Get commits since last tag
            CHANGELOG=$(git log --oneline --format="- %s" ${LAST_TAG}..HEAD)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes in this release:
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Build Information
            - Build Number: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Triggered by: ${{ github.actor }}
          draft: false
          prerelease: false

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy, release]
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ CI/CD pipeline completed successfully!"
          echo "üöÄ Deployment and release completed"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå CI/CD pipeline failed!"
          echo "Please check the logs for details"
